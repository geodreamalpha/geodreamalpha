--------first----------------------------------

1) Write code to hide mouse during gameplay.

2) Restrict the zoom in and zoom out of the mouse by using the Mathf.clamp() function (its likely the easiest way).

3) Write code to prevent mouse from clipping through the ground when it is rotated.

4) When game loads, adjust mouse to travel to the player in an upward position to prevent running into the ground.

5) implement rolling animation in player animator.  Implement rolling function in playerBehavior class (may only need to call animator.SetTrigger).

6) implement blocking animaion in player animator.  Implement blocking function in playerBehavior class (need animator.SetBool AND a way to reduce damage done to player)

7) implement better jumping methods for player where he executes a jumping up and landing animation (for better looking jump).

8) camera follows player, but jerks as player walks up and down jagged surfaces (especially when the camera is in close proximity of player).  
   Implement code in CameraBehavior to smooth out the jerkiness.

------second----------------------------------

1) finish ProjectileBase class.

2) Finish AIBase class.

3) Finish ProjectileBehaviorClass.

4) Implement damage calculations and proper layer filtering for damage collisions in the StatsBase class.

5) Download enemies, setup their animators and successfully push them on github.

6) Download particles, setup their form, and successfully push them on github.

7) Create a way to transfer projectileBehavior state from object instance specified in enemyBehavior to instantiated particle gameobject.

8) Add enemies and particle systems to CombatSystemAssets.  

9) create static projectile blueprints that are passed by value in CombatSystemAssets.  Used as generic starting point for enemy blueprint creation.

10) ***Implement system that takes player/ companion stats and determins appropriate level for enemies and their attacks (could use animation curves).

11) ***Implement system that determins how player levels up after destroying an enemy (could use animation curves).

12) Download music playlist and ambience, convert to mp3 and successfully push to github.

13) Implement soundFX for particles.

14) Implement player footsteps.

15) Implement menu sounds.

16) Implement similar menu designs for all menus.

17) Fix logical error where some assets are not properly expressed in Terrain Generator.

18) Fix Terrain generator assets so that all are of decent quality.